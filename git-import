#!/bin/bash

########################################################################
# MIT License
#
# Copyright (c) 2017 Michael Kenney
#
# Import one git repository into another, maintaining all commit
# history.
#
# Usage: git-import REPO PATH
#
# From within a git repository, specify a URL or path to a repository
# that contains the files you want to import and the path in the current
# repository that you want them be stored in. This can be run from
# anywhere within your repository.
#
# If the REPO argument is not a valid git repository, the program will
# exit.
#
# If the PATH argument is a path outside the current repository, the
# program will exit.
#
# If the PATH argument points to a file or directory that exists, you
# will be prompted to delete the file/directory. This is irreversible.
#
# If the imported repository has any submodule definitions, for each one
# you will be prompted to either import it's files and commit history,
# migrate the submodule definition into the the current repository, or
# ignore it entirely.
########################################################################

# temporary file location for cloned repositories
SUBPROJECT_CLONE_PATH=/tmp/git-import-$(date +%s%N)
SUBMODULE_BACKUP_FILE=/tmp/git-import-submodule-backup-$(date +%s%N)

# iterate up directories to find a file
function rfind() {
    test / == "$PWD" && return || test -e "$1" && echo "$PWD" && return || cd .. && rfind "$1"
}

# test a url OR a path to see if it's a repository
function test_url() {
    git ls-remote $1 &> /dev/null
    if [ 0 -eq $? ]; then
        echo $1
    fi
}

# prompt to overwrite any existing target path, otherwise create the
# path
function test_path() {
    if [ "" = "$1" ]; then
        error_subproject_path_required
        exit 2
    fi

    parent_path=$(rfind .git)
    target_path=$(realpath -m $1)

    if [[ "$target_path" != "$parent_path"* ]]; then
        error_subproject_path_outside_repo
        exit $?
    fi

    if [ -e "$1" ]; then
        printf "
    A file exists at the following location and will be deleted, do you
    want to continue?

    THIS CANNOT BE UNDONE!

    $target_path

[N/y] > "
        read option
        if [ "y" = "$option" ] || [ "Y" = "$option" ]; then
            rm -rf $target_path
            git diff-index --quiet HEAD --
            if [ 0 -ne $? ]; then
                git commit -am "Deleting $1"
            fi
        else
            exit 2
        fi
    fi
    mkdir -p $1
}

function full_path() {
    cd $1
    pwd
}

# prompt for submodule import behavior
function import_prompt() {
    printf "
    Do you want to import the following submodule files and commit
    history, migrate the submodule definitions to this project, or
    exclude these files?

    $1

    1) Import files
    2) Migrate submodule
    3) Exclude submodule

 > "
    read option
    if [ "1" = "$option" ]; then
        return 1
    elif [ "2" = "$option" ]; then
        return 2
    elif [ "3" = "$option" ]; then
        return 3
    fi
    return 0
}

# display simple usage text
function usage() {
    printf "
    Usage: $0 REPO PATH

    Import files and history from one git repository into another.

    From inside your target repository, specify the URL or path to the
    repository you want to import and the destination path for it's
    files. The git indexes will be rewritten with imported file history
    at the path specified.

    If the imported project contains any git submodules, you will be
    promted to either import and merge those projects files and history
    or add the submodules to your target repository.

    I don't use git subtrees, those are ignored. Let me know if I should
    add that.
"
}

########################################################################
# error messages
########################################################################

function error_not_in_repo() {
    printf "
    ERROR: not in a git repository
"
    exit 1
}

function error_subproject_url_required() {
    printf "
    ERROR: REPO is required
"
    exit 2
}

function error_subproject_url_invalid() {
    printf "
    ERROR: REPO is is not a valid git repository
"
    exit 3
}

function error_subproject_path_required() {
    printf "
    ERROR: PATH is required
"
    exit 4
}

function error_subproject_path_outside_repo() {
    printf "
    ERROR: specified PATH is outside of this repository
"
    exit 5
}

function error_subproject_url_cannot_equal_path() {
    printf "
    ERROR: the repository location and target path cannot be the same
    value
"
    exit 6
}

########################################################################
# input validation
########################################################################

echo "Validating repository..."
PROJECT_PATH=$(rfind .git)
if [ "" = "$PROJECT_PATH" ]; then
    error_not_in_repo
    exit $?
fi

echo "Validating url..."
SUBPROJECT_URL=$(test_url $1)
if [ "" = "$SUBPROJECT_URL" ]; then
    error_subproject_url_invalid
    exit $?
fi

if [ "$2" = "$SUBPROJECT_URL" ]; then
    error_subproject_url_cannot_equal_path
    exit $?
fi

echo "Validating path..."
test_path $2
exit_code=$?
if [ 0 -eq $exit_code ]; then
    SUBPROJECT_PATH=$(full_path $2)
    len=$((${#PROJECT_PATH}+1))
    SUBPROJECT_PATH="${SUBPROJECT_PATH:$len}"
else
    exit $exit_code
fi

if [ "-h" = "$SUBPROJECT_URL" ] || [ "--help" = "$SUBPROJECT_URL" ]; then
    usage
    exit
fi

if [ "" = "$PROJECT_PATH" ]; then
    error_not_in_repo
    exit $?
fi

if [ "" = "$SUBPROJECT_URL" ]; then
    error_subproject_url_required
    exit $?
fi

if [ "" = "$SUBPROJECT_PATH" ]; then
    error_subproject_path_required
    exit $?
fi

########################################################################
# begin import
########################################################################

declare -a submodules

cp -f $PROJECT_PATH/.gitmodules $SUBMODULE_BACKUP_FILE

git clone $SUBPROJECT_URL $SUBPROJECT_CLONE_PATH
cd $SUBPROJECT_CLONE_PATH
cp -f .gitmodules .gitmodules.original

# deal with submodules
for tmp in $(git config --file .gitmodules --get-regexp url | sed 's/ /;/g'); do
    IFS=';' read -r -a parts <<< "$tmp"

    submodule_url="${parts[1]}"

    submodule_path="${parts[0]}"
    submodule_path="${submodule_path/submodule./}"
    submodule_path="${submodule_path/.url/}"

    while true; do
        import_prompt $submodule_url
        option=$?
        if [ 1 -eq $option ] || [ 2 -eq $option ] || [ 3 -eq $option ]; then
            break;
        fi
    done

    # deinit the submodule, check out the full repository, fix the file paths
    # in the sub-project and merge with history into this project...
    git submodule deinit $submodule_path
    rm -rf $submodule_path
    git commit -am "Remove submodule '$submodule_url'"

    # Merge submodule code into the project repo
    if [ 1 -eq $option ]; then
        tmp_repo_path=/tmp/git-import-submodule-$(date +%s%N)
        git clone $submodule_url $tmp_repo_path

        cd $tmp_repo_path
        git filter-branch --index-filter 'git ls-files -s | awk '\''{printf "%s %s %s\t'$submodule_path'/%s\n", $1, $2, $3, $4}'\'' | GIT_INDEX_FILE=$GIT_INDEX_FILE.new git update-index --index-info && mkdir -p $(dirname $GIT_INDEX_FILE) && if test -f "$GIT_INDEX_FILE.new"; then mv $GIT_INDEX_FILE.new $GIT_INDEX_FILE; fi' HEAD

        cd $SUBPROJECT_CLONE_PATH
        git remote add -f tmp $tmp_repo_path
        git merge --allow-unrelated-histories tmp/master -m "Merge submodule code '$submodule_path/master'"
        git remote rm tmp

        rm -rf $tmp_repo_path

    # Save submodule info for use in the parent repo
    elif [ 2 -eq $option ]; then
        submodules+=("$submodule_url;$SUBPROJECT_PATH/$submodule_path")
    fi
done
cd $SUBPROJECT_CLONE_PATH
git rm -f .gitmodules
git commit -am "$SUBPROJECT_URL submodules merged"

# fix file paths in the repo
cd $SUBPROJECT_CLONE_PATH
git filter-branch --index-filter 'git ls-files -s | awk '\''{printf "%s %s %s\t'$SUBPROJECT_PATH'/%s\n", $1, $2, $3, $4}'\'' | GIT_INDEX_FILE=$GIT_INDEX_FILE.new git update-index --index-info && mkdir -p $(dirname $GIT_INDEX_FILE) && if test -f "$GIT_INDEX_FILE.new"; then mv $GIT_INDEX_FILE.new $GIT_INDEX_FILE; fi' HEAD

# merge sub-project files into this repo
cd $PROJECT_PATH
git remote add -f $(basename $SUBPROJECT_CLONE_PATH) $SUBPROJECT_CLONE_PATH
git merge --allow-unrelated-histories $(basename $SUBPROJECT_CLONE_PATH)/master -m 'Merge remote-tracking branch '\''$(basename $SUBPROJECT_CLONE_PATH)/master'\'''
git remote rm $(basename $SUBPROJECT_CLONE_PATH)
rm -rf $SUBPROJECT_CLONE_PATH

# migrate submodule definitions
cd $PROJECT_PATH
cp -f $SUBMODULE_BACKUP_FILE .gitmodules
git add .gitmodules
for submodule in "${submodules[@]}"; do
    IFS=';' read -r -a parts <<< "$submodule"
    git submodule add -f ${parts[0]} ${parts[1]}
done
git add .gitmodules
git commit -m "Migrate submodule definitions from $SUBPROJECT_URL"
cd $PROJECT_PATH
git submodule update --init --recursive

rm -rf $SUBPROJECT_CLONE_PATH
rm -f $SUBMODULE_BACKUP_FILE
